// SPDX-License-Identifier: MIT

pragma solidity ^0.8.13;



contract Vote{

address electionComision;

address public winner;



struct Voter{

string name;

uint age;

uint voterId;

string gender;

uint voteCandidateId;

address voterAddress;

}



struct Candidate{

string name;

string party;

uint age;

string gender;

uint candidateId;

address candidateAddress;

uint votes;

}



uint nextVoterId=1;//voter ID for voters

uint nextCandidateId=1; //candidate ID for candidates



uint startTime; //startTime of election

uint endTime; //endTime of election



mapping(uint=>Voter) voterDetails; //detaisl of voters

mapping(uint=>Candidate) candidateDetails; //details of candidates

bool stopVoting; //this for emergency situtation to stop voting



constructor(){

electionComision=msg.sender; //assinig the deployer of contract as election commision

}



modifier isVotingOver(){

require(block.timestamp>endTime || stopVoting==true,"Voting is not over");

_;

}

modifier onlyCommisioner(){

require(electionComision==msg.sender,"Not from election commision");

_;

}

//Assume we are not going to register more than 2 candidates

//1 st registration - Raju 1

//2 nd registration - Pinky 2

//3 rd registration -

function candidateRegister(string calldata _name,string calldata _party,uint _age,string calldata _gender) external{

require(msg.sender!=electionComision,"You are from election commision");

require(candidateVerification(msg.sender)==true,"Candidate Already Registered");

require(_age>=18,"You are not eligible");

require(nextCandidateId<3,"Candidate Registration Full");

candidateDetails[nextCandidateId]=Candidate(_name,_party,_age,_gender,nextCandidateId,msg.sender,0);

nextCandidateId++;

}



function candidateVerification(address _person) internal view returns(bool){

for(uint i=1; i<nextCandidateId;i++){ //to verify for double registration

if(candidateDetails[i].candidateAddress==_person){

return false;//loop enter - candidate exist

}

}

return true; //candidate does not exist

}



function candidateList() public view returns(Candidate[] memory) {//return entire candidate list

Candidate[] memory array = new Candidate[](nextCandidateId-1);//new empty array with "nexCandidateId-1" length



for(uint i=1;i<nextCandidateId;i++){

array[i-1]=candidateDetails[i];

}

return array;

}



function voterRegister(string calldata _name, uint _age, string calldata _gender) external {

require(voterVerification(msg.sender) == true, "Voter Already Registered");

require(_age >= 18, "You are not eligible");

voterDetails[nextVoterId] = Voter(_name, _age, nextVoterId, _gender, 0, msg.sender);

nextVoterId++;

}



function voterVerification(address _person) internal view returns(bool){

for(uint i = 1; i < nextVoterId; i++) { //to verify double verification

if(voterDetails[i].voterAddress == _person) {

return false; // Voter already registered

}

}

return true; // Voter not registered

}



function voterList() public view returns(Voter[] memory) {

Voter[] memory array = new Voter[](nextVoterId - 1);

for(uint i = 1; i < nextVoterId; i++) {

array[i - 1] = voterDetails[i];

}



return array;

}



function vote(uint _voterId,uint _id) external{

require(voterDetails[_voterId].voteCandidateId==0,"Already voted");

require(voterDetails[_voterId].voterAddress==msg.sender,"You are not a voter");

require(startTime!=0,"Voting not started");

require(nextCandidateId==3,"Canidate registration not done yet");

require(_id>0 && _id<3,"Invalid Canidate Id");

voterDetails[_voterId].voteCandidateId=_id;

candidateDetails[_id].votes++;

}



function voteTime(uint _startTime,uint _endTime) external onlyCommisioner(){

startTime=block.timestamp+_startTime;//4PM+2 hours = 6PM

endTime=startTime+_endTime;//6 PM+2 hours = 8PM

}



function votingStatus() public view returns(string memory){

if(startTime==0){

return "Voting has not started";

}else if((startTime!=0 && endTime>block.timestamp) && stopVoting==false){

return "In progress";

}else{

return "Ended";

}

}



// function checkStatus() internal view returns(bool){

// string memory status = votingStatus();

// bytes32 hexa = keccak256(abi.encodePacked(status));

// // bytes32 started =keccak256(abi.encodePacked("Voting has not started"));

// // bytes32 progress =keccak256(abi.encodePacked("In progress"));

// bytes32 ended =keccak256(abi.encodePacked("Ended"));



// if(hexa==ended){

// return true;

// }else{

// return false;

// }

// }

//result - voting end,

function result() external onlyCommisioner() {

require(nextCandidateId > 1, "No candidates registered");

// require(checkStatus(),"Voting has either not started or in progress");

uint maximumVotes = 0;

address currentWinner;

for (uint i = 1; i < nextCandidateId; i++) {

if (candidateDetails[i].votes > maximumVotes) {

maximumVotes = candidateDetails[i].votes;

currentWinner = candidateDetails[i].candidateAddress;

}

}

winner = currentWinner;

}

// function result() external onlyCommisioner(){

// Candidate storage candidate1=candidateDetails[1];

// Candidate storage candidate2=candidateDetails[2];

// if(candidate1.votes>candidate2.votes){

// winner=candidate1.candidateAddress;

// }else{

// winner = candidate2.candidateAddress;

// }

// }





function emergency() public onlyCommisioner(){

stopVoting=true;

}

}





